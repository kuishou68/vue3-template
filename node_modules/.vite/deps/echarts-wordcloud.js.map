{
  "version": 3,
  "sources": ["../../echarts/lib/echarts.js", "../../echarts-wordcloud/src/WordCloudSeries.js", "../../echarts-wordcloud/src/WordCloudView.js", "../../echarts-wordcloud/src/layout.js", "../../echarts-wordcloud/src/wordCloud.js"],
  "sourcesContent": ["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nexport * from './export/core.js';\nimport { use } from './extension.js';\nimport { init } from './core/echarts.js';\nimport { install as CanvasRenderer } from './renderer/installCanvasRenderer.js';\nimport { install as DatasetComponent } from './component/dataset/install.js'; // Default to have canvas renderer and dataset for compitatble reason.\n\nuse([CanvasRenderer, DatasetComponent]); // TODO: Compatitable with the following code\n// import echarts from 'echarts/lib/echarts.js'\n\nexport default {\n  init: function () {\n    if (process.env.NODE_ENV !== 'production') {\n      /* eslint-disable-next-line */\n      console.error(\"\\\"import echarts from 'echarts/lib/echarts.js'\\\" is not supported anymore. Use \\\"import * as echarts from 'echarts/lib/echarts.js'\\\" instead;\");\n    } // @ts-ignore\n\n\n    return init.apply(null, arguments);\n  }\n}; // Import label layout by default.\n// TODO remove\n\nimport { installLabelLayout } from './label/installLabelLayout.js';\nuse(installLabelLayout);", "import * as echarts from 'echarts/lib/echarts';\r\n\r\necharts.extendSeriesModel({\r\n  type: 'series.wordCloud',\r\n\r\n  visualStyleAccessPath: 'textStyle',\r\n  visualStyleMapper: function (model) {\r\n    return {\r\n      fill: model.get('color')\r\n    };\r\n  },\r\n  visualDrawType: 'fill',\r\n\r\n  optionUpdated: function () {\r\n    var option = this.option;\r\n    option.gridSize = Math.max(Math.floor(option.gridSize), 4);\r\n  },\r\n\r\n  getInitialData: function (option, ecModel) {\r\n    var dimensions = echarts.helper.createDimensions(option.data, {\r\n      coordDimensions: ['value']\r\n    });\r\n    var list = new echarts.List(dimensions, this);\r\n    list.initData(option.data);\r\n    return list;\r\n  },\r\n\r\n  // Most of options are from https://github.com/timdream/wordcloud2.js/blob/gh-pages/API.md\r\n  defaultOption: {\r\n    maskImage: null,\r\n\r\n    // Shape can be 'circle', 'cardioid', 'diamond', 'triangle-forward', 'triangle', 'pentagon', 'star'\r\n    shape: 'circle',\r\n    keepAspect: false,\r\n\r\n    left: 'center',\r\n\r\n    top: 'center',\r\n\r\n    width: '70%',\r\n\r\n    height: '80%',\r\n\r\n    sizeRange: [12, 60],\r\n\r\n    rotationRange: [-90, 90],\r\n\r\n    rotationStep: 45,\r\n\r\n    gridSize: 8,\r\n\r\n    drawOutOfBound: false,\r\n    shrinkToFit: false,\r\n\r\n    textStyle: {\r\n      fontWeight: 'normal'\r\n    }\r\n  }\r\n});\r\n", "import * as echarts from 'echarts/lib/echarts';\r\n\r\necharts.extendChartView({\r\n  type: 'wordCloud',\r\n\r\n  render: function (seriesModel, ecModel, api) {\r\n    var group = this.group;\r\n    group.removeAll();\r\n\r\n    var data = seriesModel.getData();\r\n\r\n    var gridSize = seriesModel.get('gridSize');\r\n\r\n    seriesModel.layoutInstance.ondraw = function (text, size, dataIdx, drawn) {\r\n      var itemModel = data.getItemModel(dataIdx);\r\n      var textStyleModel = itemModel.getModel('textStyle');\r\n\r\n      var textEl = new echarts.graphic.Text({\r\n        style: echarts.helper.createTextStyle(textStyleModel),\r\n        scaleX: 1 / drawn.info.mu,\r\n        scaleY: 1 / drawn.info.mu,\r\n        x: (drawn.gx + drawn.info.gw / 2) * gridSize,\r\n        y: (drawn.gy + drawn.info.gh / 2) * gridSize,\r\n        rotation: drawn.rot\r\n      });\r\n      textEl.setStyle({\r\n        x: drawn.info.fillTextOffsetX,\r\n        y: drawn.info.fillTextOffsetY + size * 0.5,\r\n        text: text,\r\n        verticalAlign: 'middle',\r\n        fill: data.getItemVisual(dataIdx, 'style').fill,\r\n        fontSize: size\r\n      });\r\n\r\n      group.add(textEl);\r\n\r\n      data.setItemGraphicEl(dataIdx, textEl);\r\n\r\n      textEl.ensureState('emphasis').style = echarts.helper.createTextStyle(\r\n        itemModel.getModel(['emphasis', 'textStyle']),\r\n        {\r\n          state: 'emphasis'\r\n        }\r\n      );\r\n      textEl.ensureState('blur').style = echarts.helper.createTextStyle(\r\n        itemModel.getModel(['blur', 'textStyle']),\r\n        {\r\n          state: 'blur'\r\n        }\r\n      );\r\n\r\n      echarts.helper.enableHoverEmphasis(\r\n        textEl,\r\n        itemModel.get(['emphasis', 'focus']),\r\n        itemModel.get(['emphasis', 'blurScope'])\r\n      );\r\n\r\n      textEl.stateTransition = {\r\n        duration: seriesModel.get('animation')\r\n          ? seriesModel.get(['stateAnimation', 'duration'])\r\n          : 0,\r\n        easing: seriesModel.get(['stateAnimation', 'easing'])\r\n      };\r\n      // TODO\r\n      textEl.__highDownDispatcher = true;\r\n    };\r\n\r\n    this._model = seriesModel;\r\n  },\r\n\r\n  remove: function () {\r\n    this.group.removeAll();\r\n\r\n    this._model.layoutInstance.dispose();\r\n  },\r\n\r\n  dispose: function () {\r\n    this._model.layoutInstance.dispose();\r\n  }\r\n});\r\n", "/*!\r\n * wordcloud2.js\r\n * http://timdream.org/wordcloud2.js/\r\n *\r\n * Copyright 2011 - 2019 Tim Guan-tin Chien and contributors.\r\n * Released under the MIT license\r\n */\r\n\r\n'use strict';\r\n\r\n// setImmediate\r\nif (!window.setImmediate) {\r\n  window.setImmediate = (function setupSetImmediate() {\r\n    return (\r\n      window.msSetImmediate ||\r\n      window.webkitSetImmediate ||\r\n      window.mozSetImmediate ||\r\n      window.oSetImmediate ||\r\n      (function setupSetZeroTimeout() {\r\n        if (!window.postMessage || !window.addEventListener) {\r\n          return null;\r\n        }\r\n\r\n        var callbacks = [undefined];\r\n        var message = 'zero-timeout-message';\r\n\r\n        // Like setTimeout, but only takes a function argument.  There's\r\n        // no time argument (always zero) and no arguments (you have to\r\n        // use a closure).\r\n        var setZeroTimeout = function setZeroTimeout(callback) {\r\n          var id = callbacks.length;\r\n          callbacks.push(callback);\r\n          window.postMessage(message + id.toString(36), '*');\r\n\r\n          return id;\r\n        };\r\n\r\n        window.addEventListener(\r\n          'message',\r\n          function setZeroTimeoutMessage(evt) {\r\n            // Skipping checking event source, retarded IE confused this window\r\n            // object with another in the presence of iframe\r\n            if (\r\n              typeof evt.data !== 'string' ||\r\n              evt.data.substr(0, message.length) !== message /* ||\r\n            evt.source !== window */\r\n            ) {\r\n              return;\r\n            }\r\n\r\n            evt.stopImmediatePropagation();\r\n\r\n            var id = parseInt(evt.data.substr(message.length), 36);\r\n            if (!callbacks[id]) {\r\n              return;\r\n            }\r\n\r\n            callbacks[id]();\r\n            callbacks[id] = undefined;\r\n          },\r\n          true\r\n        );\r\n\r\n        /* specify clearImmediate() here since we need the scope */\r\n        window.clearImmediate = function clearZeroTimeout(id) {\r\n          if (!callbacks[id]) {\r\n            return;\r\n          }\r\n\r\n          callbacks[id] = undefined;\r\n        };\r\n\r\n        return setZeroTimeout;\r\n      })() ||\r\n      // fallback\r\n      function setImmediateFallback(fn) {\r\n        window.setTimeout(fn, 0);\r\n      }\r\n    );\r\n  })();\r\n}\r\n\r\nif (!window.clearImmediate) {\r\n  window.clearImmediate = (function setupClearImmediate() {\r\n    return (\r\n      window.msClearImmediate ||\r\n      window.webkitClearImmediate ||\r\n      window.mozClearImmediate ||\r\n      window.oClearImmediate ||\r\n      // \"clearZeroTimeout\" is implement on the previous block ||\r\n      // fallback\r\n      function clearImmediateFallback(timer) {\r\n        window.clearTimeout(timer);\r\n      }\r\n    );\r\n  })();\r\n}\r\n\r\n// Check if WordCloud can run on this browser\r\nvar isSupported = (function isSupported() {\r\n  var canvas = document.createElement('canvas');\r\n  if (!canvas || !canvas.getContext) {\r\n    return false;\r\n  }\r\n\r\n  var ctx = canvas.getContext('2d');\r\n  if (!ctx) {\r\n    return false;\r\n  }\r\n  if (!ctx.getImageData) {\r\n    return false;\r\n  }\r\n  if (!ctx.fillText) {\r\n    return false;\r\n  }\r\n\r\n  if (!Array.prototype.some) {\r\n    return false;\r\n  }\r\n  if (!Array.prototype.push) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n})();\r\n\r\n// Find out if the browser impose minium font size by\r\n// drawing small texts on a canvas and measure it's width.\r\nvar minFontSize = (function getMinFontSize() {\r\n  if (!isSupported) {\r\n    return;\r\n  }\r\n\r\n  var ctx = document.createElement('canvas').getContext('2d');\r\n\r\n  // start from 20\r\n  var size = 20;\r\n\r\n  // two sizes to measure\r\n  var hanWidth, mWidth;\r\n\r\n  while (size) {\r\n    ctx.font = size.toString(10) + 'px sans-serif';\r\n    if (\r\n      ctx.measureText('\\uFF37').width === hanWidth &&\r\n      ctx.measureText('m').width === mWidth\r\n    ) {\r\n      return size + 1;\r\n    }\r\n\r\n    hanWidth = ctx.measureText('\\uFF37').width;\r\n    mWidth = ctx.measureText('m').width;\r\n\r\n    size--;\r\n  }\r\n\r\n  return 0;\r\n})();\r\n\r\nvar getItemExtraData = function (item) {\r\n  if (Array.isArray(item)) {\r\n    var itemCopy = item.slice();\r\n    // remove data we already have (word and weight)\r\n    itemCopy.splice(0, 2);\r\n    return itemCopy;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n// Based on http://jsfromhell.com/array/shuffle\r\nvar shuffleArray = function shuffleArray(arr) {\r\n  for (var j, x, i = arr.length; i; ) {\r\n    j = Math.floor(Math.random() * i);\r\n    x = arr[--i];\r\n    arr[i] = arr[j];\r\n    arr[j] = x;\r\n  }\r\n  return arr;\r\n};\r\n\r\nvar timer = {};\r\nvar WordCloud = function WordCloud(elements, options) {\r\n  if (!isSupported) {\r\n    return;\r\n  }\r\n\r\n  var timerId = Math.floor(Math.random() * Date.now());\r\n\r\n  if (!Array.isArray(elements)) {\r\n    elements = [elements];\r\n  }\r\n\r\n  elements.forEach(function (el, i) {\r\n    if (typeof el === 'string') {\r\n      elements[i] = document.getElementById(el);\r\n      if (!elements[i]) {\r\n        throw new Error('The element id specified is not found.');\r\n      }\r\n    } else if (!el.tagName && !el.appendChild) {\r\n      throw new Error(\r\n        'You must pass valid HTML elements, or ID of the element.'\r\n      );\r\n    }\r\n  });\r\n\r\n  /* Default values to be overwritten by options object */\r\n  var settings = {\r\n    list: [],\r\n    fontFamily:\r\n      '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' +\r\n      '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\r\n    fontWeight: 'normal',\r\n    color: 'random-dark',\r\n    minSize: 0, // 0 to disable\r\n    weightFactor: 1,\r\n    clearCanvas: true,\r\n    backgroundColor: '#fff', // opaque white = rgba(255, 255, 255, 1)\r\n\r\n    gridSize: 8,\r\n    drawOutOfBound: false,\r\n    shrinkToFit: false,\r\n    origin: null,\r\n\r\n    drawMask: false,\r\n    maskColor: 'rgba(255,0,0,0.3)',\r\n    maskGapWidth: 0.3,\r\n\r\n    layoutAnimation: true,\r\n\r\n    wait: 0,\r\n    abortThreshold: 0, // disabled\r\n    abort: function noop() {},\r\n\r\n    minRotation: -Math.PI / 2,\r\n    maxRotation: Math.PI / 2,\r\n    rotationStep: 0.1,\r\n\r\n    shuffle: true,\r\n    rotateRatio: 0.1,\r\n\r\n    shape: 'circle',\r\n    ellipticity: 0.65,\r\n\r\n    classes: null,\r\n\r\n    hover: null,\r\n    click: null\r\n  };\r\n\r\n  if (options) {\r\n    for (var key in options) {\r\n      if (key in settings) {\r\n        settings[key] = options[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Convert weightFactor into a function */\r\n  if (typeof settings.weightFactor !== 'function') {\r\n    var factor = settings.weightFactor;\r\n    settings.weightFactor = function weightFactor(pt) {\r\n      return pt * factor; // in px\r\n    };\r\n  }\r\n\r\n  /* Convert shape into a function */\r\n  if (typeof settings.shape !== 'function') {\r\n    switch (settings.shape) {\r\n      case 'circle':\r\n      /* falls through */\r\n      default:\r\n        // 'circle' is the default and a shortcut in the code loop.\r\n        settings.shape = 'circle';\r\n        break;\r\n\r\n      case 'cardioid':\r\n        settings.shape = function shapeCardioid(theta) {\r\n          return 1 - Math.sin(theta);\r\n        };\r\n        break;\r\n\r\n      /*\r\n        To work out an X-gon, one has to calculate \"m\",\r\n        where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\r\n        http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\r\n        2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\r\n        Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\r\n        where t' equals to mod(t, 2PI/X);\r\n        */\r\n\r\n      case 'diamond':\r\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\r\n        // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\r\n        // +0+..+2*PI\r\n        settings.shape = function shapeSquare(theta) {\r\n          var thetaPrime = theta % ((2 * Math.PI) / 4);\r\n          return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\r\n        };\r\n        break;\r\n\r\n      case 'square':\r\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+min(1%2Fabs(cos(t\r\n        // )),1%2Fabs(sin(t)))),+t+%3D+0+..+2*PI\r\n        settings.shape = function shapeSquare(theta) {\r\n          return Math.min(\r\n            1 / Math.abs(Math.cos(theta)),\r\n            1 / Math.abs(Math.sin(theta))\r\n          );\r\n        };\r\n        break;\r\n\r\n      case 'triangle-forward':\r\n        // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\r\n        // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\r\n        // %29%29%2C+t+%3D+0+..+2*PI\r\n        settings.shape = function shapeTriangle(theta) {\r\n          var thetaPrime = theta % ((2 * Math.PI) / 3);\r\n          return (\r\n            1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime))\r\n          );\r\n        };\r\n        break;\r\n\r\n      case 'triangle':\r\n      case 'triangle-upright':\r\n        settings.shape = function shapeTriangle(theta) {\r\n          var thetaPrime = (theta + (Math.PI * 3) / 2) % ((2 * Math.PI) / 3);\r\n          return (\r\n            1 / (Math.cos(thetaPrime) + Math.sqrt(3) * Math.sin(thetaPrime))\r\n          );\r\n        };\r\n        break;\r\n\r\n      case 'pentagon':\r\n        settings.shape = function shapePentagon(theta) {\r\n          var thetaPrime = (theta + 0.955) % ((2 * Math.PI) / 5);\r\n          return 1 / (Math.cos(thetaPrime) + 0.726543 * Math.sin(thetaPrime));\r\n        };\r\n        break;\r\n\r\n      case 'star':\r\n        settings.shape = function shapeStar(theta) {\r\n          var thetaPrime = (theta + 0.955) % ((2 * Math.PI) / 10);\r\n          if (\r\n            ((theta + 0.955) % ((2 * Math.PI) / 5)) - (2 * Math.PI) / 10 >=\r\n            0\r\n          ) {\r\n            return (\r\n              1 /\r\n              (Math.cos((2 * Math.PI) / 10 - thetaPrime) +\r\n                3.07768 * Math.sin((2 * Math.PI) / 10 - thetaPrime))\r\n            );\r\n          } else {\r\n            return 1 / (Math.cos(thetaPrime) + 3.07768 * Math.sin(thetaPrime));\r\n          }\r\n        };\r\n        break;\r\n    }\r\n  }\r\n\r\n  /* Make sure gridSize is a whole number and is not smaller than 4px */\r\n  settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\r\n\r\n  /* shorthand */\r\n  var g = settings.gridSize;\r\n  var maskRectWidth = g - settings.maskGapWidth;\r\n\r\n  /* normalize rotation settings */\r\n  var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\r\n  var minRotation = Math.min(settings.maxRotation, settings.minRotation);\r\n  var rotationStep = settings.rotationStep;\r\n\r\n  /* information/object available to all functions, set when start() */\r\n  var grid, // 2d array containing filling information\r\n    ngx,\r\n    ngy, // width and height of the grid\r\n    center, // position of the center of the cloud\r\n    maxRadius;\r\n\r\n  /* timestamp for measuring each putWord() action */\r\n  var escapeTime;\r\n\r\n  /* function for getting the color of the text */\r\n  var getTextColor;\r\n  function randomHslColor(min, max) {\r\n    return (\r\n      'hsl(' +\r\n      (Math.random() * 360).toFixed() +\r\n      ',' +\r\n      (Math.random() * 30 + 70).toFixed() +\r\n      '%,' +\r\n      (Math.random() * (max - min) + min).toFixed() +\r\n      '%)'\r\n    );\r\n  }\r\n  switch (settings.color) {\r\n    case 'random-dark':\r\n      getTextColor = function getRandomDarkColor() {\r\n        return randomHslColor(10, 50);\r\n      };\r\n      break;\r\n\r\n    case 'random-light':\r\n      getTextColor = function getRandomLightColor() {\r\n        return randomHslColor(50, 90);\r\n      };\r\n      break;\r\n\r\n    default:\r\n      if (typeof settings.color === 'function') {\r\n        getTextColor = settings.color;\r\n      }\r\n      break;\r\n  }\r\n\r\n  /* function for getting the font-weight of the text */\r\n  var getTextFontWeight;\r\n  if (typeof settings.fontWeight === 'function') {\r\n    getTextFontWeight = settings.fontWeight;\r\n  }\r\n\r\n  /* function for getting the classes of the text */\r\n  var getTextClasses = null;\r\n  if (typeof settings.classes === 'function') {\r\n    getTextClasses = settings.classes;\r\n  }\r\n\r\n  /* Interactive */\r\n  var interactive = false;\r\n  var infoGrid = [];\r\n  var hovered;\r\n\r\n  var getInfoGridFromMouseTouchEvent = function getInfoGridFromMouseTouchEvent(\r\n    evt\r\n  ) {\r\n    var canvas = evt.currentTarget;\r\n    var rect = canvas.getBoundingClientRect();\r\n    var clientX;\r\n    var clientY;\r\n    /** Detect if touches are available */\r\n    if (evt.touches) {\r\n      clientX = evt.touches[0].clientX;\r\n      clientY = evt.touches[0].clientY;\r\n    } else {\r\n      clientX = evt.clientX;\r\n      clientY = evt.clientY;\r\n    }\r\n    var eventX = clientX - rect.left;\r\n    var eventY = clientY - rect.top;\r\n\r\n    var x = Math.floor((eventX * (canvas.width / rect.width || 1)) / g);\r\n    var y = Math.floor((eventY * (canvas.height / rect.height || 1)) / g);\r\n\r\n    if (!infoGrid[x]) {\r\n      return null\r\n    }\r\n\r\n    return infoGrid[x][y];\r\n  };\r\n\r\n  var wordcloudhover = function wordcloudhover(evt) {\r\n    var info = getInfoGridFromMouseTouchEvent(evt);\r\n\r\n    if (hovered === info) {\r\n      return;\r\n    }\r\n\r\n    hovered = info;\r\n    if (!info) {\r\n      settings.hover(undefined, undefined, evt);\r\n\r\n      return;\r\n    }\r\n\r\n    settings.hover(info.item, info.dimension, evt);\r\n  };\r\n\r\n  var wordcloudclick = function wordcloudclick(evt) {\r\n    var info = getInfoGridFromMouseTouchEvent(evt);\r\n    if (!info) {\r\n      return;\r\n    }\r\n\r\n    settings.click(info.item, info.dimension, evt);\r\n    evt.preventDefault();\r\n  };\r\n\r\n  /* Get points on the grid for a given radius away from the center */\r\n  var pointsAtRadius = [];\r\n  var getPointsAtRadius = function getPointsAtRadius(radius) {\r\n    if (pointsAtRadius[radius]) {\r\n      return pointsAtRadius[radius];\r\n    }\r\n\r\n    // Look for these number of points on each radius\r\n    var T = radius * 8;\r\n\r\n    // Getting all the points at this radius\r\n    var t = T;\r\n    var points = [];\r\n\r\n    if (radius === 0) {\r\n      points.push([center[0], center[1], 0]);\r\n    }\r\n\r\n    while (t--) {\r\n      // distort the radius to put the cloud in shape\r\n      var rx = 1;\r\n      if (settings.shape !== 'circle') {\r\n        rx = settings.shape((t / T) * 2 * Math.PI); // 0 to 1\r\n      }\r\n\r\n      // Push [x, y, t]; t is used solely for getTextColor()\r\n      points.push([\r\n        center[0] + radius * rx * Math.cos((-t / T) * 2 * Math.PI),\r\n        center[1] +\r\n          radius * rx * Math.sin((-t / T) * 2 * Math.PI) * settings.ellipticity,\r\n        (t / T) * 2 * Math.PI\r\n      ]);\r\n    }\r\n\r\n    pointsAtRadius[radius] = points;\r\n    return points;\r\n  };\r\n\r\n  /* Return true if we had spent too much time */\r\n  var exceedTime = function exceedTime() {\r\n    return (\r\n      settings.abortThreshold > 0 &&\r\n      new Date().getTime() - escapeTime > settings.abortThreshold\r\n    );\r\n  };\r\n\r\n  /* Get the deg of rotation according to settings, and luck. */\r\n  var getRotateDeg = function getRotateDeg() {\r\n    if (settings.rotateRatio === 0) {\r\n      return 0;\r\n    }\r\n\r\n    if (Math.random() > settings.rotateRatio) {\r\n      return 0;\r\n    }\r\n\r\n    if (rotationRange === 0) {\r\n      return minRotation;\r\n    }\r\n\r\n    return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\r\n  };\r\n\r\n  var getTextInfo = function getTextInfo(\r\n    word,\r\n    weight,\r\n    rotateDeg,\r\n    extraDataArray\r\n  ) {\r\n    // calculate the acutal font size\r\n    // fontSize === 0 means weightFactor function wants the text skipped,\r\n    // and size < minSize means we cannot draw the text.\r\n    var debug = false;\r\n    var fontSize = settings.weightFactor(weight);\r\n    if (fontSize <= settings.minSize) {\r\n      return false;\r\n    }\r\n\r\n    // Scale factor here is to make sure fillText is not limited by\r\n    // the minium font size set by browser.\r\n    // It will always be 1 or 2n.\r\n    var mu = 1;\r\n    if (fontSize < minFontSize) {\r\n      mu = (function calculateScaleFactor() {\r\n        var mu = 2;\r\n        while (mu * fontSize < minFontSize) {\r\n          mu += 2;\r\n        }\r\n        return mu;\r\n      })();\r\n    }\r\n\r\n    // Get fontWeight that will be used to set fctx.font\r\n    var fontWeight;\r\n    if (getTextFontWeight) {\r\n      fontWeight = getTextFontWeight(word, weight, fontSize, extraDataArray);\r\n    } else {\r\n      fontWeight = settings.fontWeight;\r\n    }\r\n\r\n    var fcanvas = document.createElement('canvas');\r\n    var fctx = fcanvas.getContext('2d', { willReadFrequently: true });\r\n\r\n    fctx.font =\r\n      fontWeight +\r\n      ' ' +\r\n      (fontSize * mu).toString(10) +\r\n      'px ' +\r\n      settings.fontFamily;\r\n\r\n    // Estimate the dimension of the text with measureText().\r\n    var fw = fctx.measureText(word).width / mu;\r\n    var fh =\r\n      Math.max(\r\n        fontSize * mu,\r\n        fctx.measureText('m').width,\r\n        fctx.measureText('\\uFF37').width\r\n      ) / mu;\r\n\r\n    // Create a boundary box that is larger than our estimates,\r\n    // so text don't get cut of (it sill might)\r\n    var boxWidth = fw + fh * 2;\r\n    var boxHeight = fh * 3;\r\n    var fgw = Math.ceil(boxWidth / g);\r\n    var fgh = Math.ceil(boxHeight / g);\r\n    boxWidth = fgw * g;\r\n    boxHeight = fgh * g;\r\n\r\n    // Calculate the proper offsets to make the text centered at\r\n    // the preferred position.\r\n\r\n    // This is simply half of the width.\r\n    var fillTextOffsetX = -fw / 2;\r\n    // Instead of moving the box to the exact middle of the preferred\r\n    // position, for Y-offset we move 0.4 instead, so Latin alphabets look\r\n    // vertical centered.\r\n    var fillTextOffsetY = -fh * 0.4;\r\n\r\n    // Calculate the actual dimension of the canvas, considering the rotation.\r\n    var cgh = Math.ceil(\r\n      (boxWidth * Math.abs(Math.sin(rotateDeg)) +\r\n        boxHeight * Math.abs(Math.cos(rotateDeg))) /\r\n        g\r\n    );\r\n    var cgw = Math.ceil(\r\n      (boxWidth * Math.abs(Math.cos(rotateDeg)) +\r\n        boxHeight * Math.abs(Math.sin(rotateDeg))) /\r\n        g\r\n    );\r\n    var width = cgw * g;\r\n    var height = cgh * g;\r\n\r\n    fcanvas.setAttribute('width', width);\r\n    fcanvas.setAttribute('height', height);\r\n\r\n    if (debug) {\r\n      // Attach fcanvas to the DOM\r\n      document.body.appendChild(fcanvas);\r\n      // Save it's state so that we could restore and draw the grid correctly.\r\n      fctx.save();\r\n    }\r\n\r\n    // Scale the canvas with |mu|.\r\n    fctx.scale(1 / mu, 1 / mu);\r\n    fctx.translate((width * mu) / 2, (height * mu) / 2);\r\n    fctx.rotate(-rotateDeg);\r\n\r\n    // Once the width/height is set, ctx info will be reset.\r\n    // Set it again here.\r\n    fctx.font =\r\n      fontWeight +\r\n      ' ' +\r\n      (fontSize * mu).toString(10) +\r\n      'px ' +\r\n      settings.fontFamily;\r\n\r\n    // Fill the text into the fcanvas.\r\n    // XXX: We cannot because textBaseline = 'top' here because\r\n    // Firefox and Chrome uses different default line-height for canvas.\r\n    // Please read https://bugzil.la/737852#c6.\r\n    // Here, we use textBaseline = 'middle' and draw the text at exactly\r\n    // 0.5 * fontSize lower.\r\n    fctx.fillStyle = '#000';\r\n    fctx.textBaseline = 'middle';\r\n    fctx.fillText(\r\n      word,\r\n      fillTextOffsetX * mu,\r\n      (fillTextOffsetY + fontSize * 0.5) * mu\r\n    );\r\n\r\n    // Get the pixels of the text\r\n    var imageData = fctx.getImageData(0, 0, width, height).data;\r\n\r\n    if (exceedTime()) {\r\n      return false;\r\n    }\r\n\r\n    if (debug) {\r\n      // Draw the box of the original estimation\r\n      fctx.strokeRect(fillTextOffsetX * mu, fillTextOffsetY, fw * mu, fh * mu);\r\n      fctx.restore();\r\n    }\r\n\r\n    // Read the pixels and save the information to the occupied array\r\n    var occupied = [];\r\n    var gx = cgw;\r\n    var gy, x, y;\r\n    var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\r\n    while (gx--) {\r\n      gy = cgh;\r\n      while (gy--) {\r\n        y = g;\r\n        /* eslint no-labels: ['error', { 'allowLoop': true }] */\r\n        singleGridLoop: while (y--) {\r\n          x = g;\r\n          while (x--) {\r\n            if (imageData[((gy * g + y) * width + (gx * g + x)) * 4 + 3]) {\r\n              occupied.push([gx, gy]);\r\n\r\n              if (gx < bounds[3]) {\r\n                bounds[3] = gx;\r\n              }\r\n              if (gx > bounds[1]) {\r\n                bounds[1] = gx;\r\n              }\r\n              if (gy < bounds[0]) {\r\n                bounds[0] = gy;\r\n              }\r\n              if (gy > bounds[2]) {\r\n                bounds[2] = gy;\r\n              }\r\n\r\n              if (debug) {\r\n                fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\r\n                fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\r\n              }\r\n              break singleGridLoop;\r\n            }\r\n          }\r\n        }\r\n        if (debug) {\r\n          fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\r\n          fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\r\n      fctx.fillRect(\r\n        bounds[3] * g,\r\n        bounds[0] * g,\r\n        (bounds[1] - bounds[3] + 1) * g,\r\n        (bounds[2] - bounds[0] + 1) * g\r\n      );\r\n    }\r\n\r\n    // Return information needed to create the text on the real canvas\r\n    return {\r\n      mu: mu,\r\n      occupied: occupied,\r\n      bounds: bounds,\r\n      gw: cgw,\r\n      gh: cgh,\r\n      fillTextOffsetX: fillTextOffsetX,\r\n      fillTextOffsetY: fillTextOffsetY,\r\n      fillTextWidth: fw,\r\n      fillTextHeight: fh,\r\n      fontSize: fontSize\r\n    };\r\n  };\r\n\r\n  /* Determine if there is room available in the given dimension */\r\n  var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\r\n    // Go through the occupied points,\r\n    // return false if the space is not available.\r\n    var i = occupied.length;\r\n    while (i--) {\r\n      var px = gx + occupied[i][0];\r\n      var py = gy + occupied[i][1];\r\n\r\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\r\n        if (!settings.drawOutOfBound) {\r\n          return false;\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (!grid[px][py]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /* Actually draw the text on the grid */\r\n  var drawText = function drawText(\r\n    gx,\r\n    gy,\r\n    info,\r\n    word,\r\n    weight,\r\n    distance,\r\n    theta,\r\n    rotateDeg,\r\n    attributes,\r\n    extraDataArray\r\n  ) {\r\n    var fontSize = info.fontSize;\r\n    var color;\r\n    if (getTextColor) {\r\n      color = getTextColor(\r\n        word,\r\n        weight,\r\n        fontSize,\r\n        distance,\r\n        theta,\r\n        extraDataArray\r\n      );\r\n    } else {\r\n      color = settings.color;\r\n    }\r\n\r\n    // get fontWeight that will be used to set ctx.font and font style rule\r\n    var fontWeight;\r\n    if (getTextFontWeight) {\r\n      fontWeight = getTextFontWeight(word, weight, fontSize, extraDataArray);\r\n    } else {\r\n      fontWeight = settings.fontWeight;\r\n    }\r\n\r\n    var classes;\r\n    if (getTextClasses) {\r\n      classes = getTextClasses(word, weight, fontSize, extraDataArray);\r\n    } else {\r\n      classes = settings.classes;\r\n    }\r\n\r\n    elements.forEach(function (el) {\r\n      if (el.getContext) {\r\n        var ctx = el.getContext('2d');\r\n        var mu = info.mu;\r\n\r\n        // Save the current state before messing it\r\n        ctx.save();\r\n        ctx.scale(1 / mu, 1 / mu);\r\n\r\n        ctx.font =\r\n          fontWeight +\r\n          ' ' +\r\n          (fontSize * mu).toString(10) +\r\n          'px ' +\r\n          settings.fontFamily;\r\n        ctx.fillStyle = color;\r\n\r\n        // Translate the canvas position to the origin coordinate of where\r\n        // the text should be put.\r\n        ctx.translate((gx + info.gw / 2) * g * mu, (gy + info.gh / 2) * g * mu);\r\n\r\n        if (rotateDeg !== 0) {\r\n          ctx.rotate(-rotateDeg);\r\n        }\r\n\r\n        // Finally, fill the text.\r\n\r\n        // XXX: We cannot because textBaseline = 'top' here because\r\n        // Firefox and Chrome uses different default line-height for canvas.\r\n        // Please read https://bugzil.la/737852#c6.\r\n        // Here, we use textBaseline = 'middle' and draw the text at exactly\r\n        // 0.5 * fontSize lower.\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText(\r\n          word,\r\n          info.fillTextOffsetX * mu,\r\n          (info.fillTextOffsetY + fontSize * 0.5) * mu\r\n        );\r\n\r\n        // The below box is always matches how <span>s are positioned\r\n        /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\r\n            info.fillTextWidth, info.fillTextHeight); */\r\n\r\n        // Restore the state.\r\n        ctx.restore();\r\n      } else {\r\n        // drawText on DIV element\r\n        var span = document.createElement('span');\r\n        var transformRule = '';\r\n        transformRule = 'rotate(' + (-rotateDeg / Math.PI) * 180 + 'deg) ';\r\n        if (info.mu !== 1) {\r\n          transformRule +=\r\n            'translateX(-' +\r\n            info.fillTextWidth / 4 +\r\n            'px) ' +\r\n            'scale(' +\r\n            1 / info.mu +\r\n            ')';\r\n        }\r\n        var styleRules = {\r\n          position: 'absolute',\r\n          display: 'block',\r\n          font:\r\n            fontWeight + ' ' + fontSize * info.mu + 'px ' + settings.fontFamily,\r\n          left: (gx + info.gw / 2) * g + info.fillTextOffsetX + 'px',\r\n          top: (gy + info.gh / 2) * g + info.fillTextOffsetY + 'px',\r\n          width: info.fillTextWidth + 'px',\r\n          height: info.fillTextHeight + 'px',\r\n          lineHeight: fontSize + 'px',\r\n          whiteSpace: 'nowrap',\r\n          transform: transformRule,\r\n          webkitTransform: transformRule,\r\n          msTransform: transformRule,\r\n          transformOrigin: '50% 40%',\r\n          webkitTransformOrigin: '50% 40%',\r\n          msTransformOrigin: '50% 40%'\r\n        };\r\n        if (color) {\r\n          styleRules.color = color;\r\n        }\r\n        span.textContent = word;\r\n        for (var cssProp in styleRules) {\r\n          span.style[cssProp] = styleRules[cssProp];\r\n        }\r\n        if (attributes) {\r\n          for (var attribute in attributes) {\r\n            span.setAttribute(attribute, attributes[attribute]);\r\n          }\r\n        }\r\n        if (classes) {\r\n          span.className += classes;\r\n        }\r\n        el.appendChild(span);\r\n      }\r\n    });\r\n  };\r\n\r\n  /* Help function to updateGrid */\r\n  var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\r\n    if (x >= ngx || y >= ngy || x < 0 || y < 0) {\r\n      return;\r\n    }\r\n\r\n    grid[x][y] = false;\r\n\r\n    if (drawMask) {\r\n      var ctx = elements[0].getContext('2d');\r\n      ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\r\n    }\r\n\r\n    if (interactive) {\r\n      infoGrid[x][y] = { item: item, dimension: dimension };\r\n    }\r\n  };\r\n\r\n  /* Update the filling information of the given space with occupied points.\r\n       Draw the mask on the canvas if necessary. */\r\n  var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\r\n    var occupied = info.occupied;\r\n    var drawMask = settings.drawMask;\r\n    var ctx;\r\n    if (drawMask) {\r\n      ctx = elements[0].getContext('2d');\r\n      ctx.save();\r\n      ctx.fillStyle = settings.maskColor;\r\n    }\r\n\r\n    var dimension;\r\n    if (interactive) {\r\n      var bounds = info.bounds;\r\n      dimension = {\r\n        x: (gx + bounds[3]) * g,\r\n        y: (gy + bounds[0]) * g,\r\n        w: (bounds[1] - bounds[3] + 1) * g,\r\n        h: (bounds[2] - bounds[0] + 1) * g\r\n      };\r\n    }\r\n\r\n    var i = occupied.length;\r\n    while (i--) {\r\n      var px = gx + occupied[i][0];\r\n      var py = gy + occupied[i][1];\r\n\r\n      if (px >= ngx || py >= ngy || px < 0 || py < 0) {\r\n        continue;\r\n      }\r\n\r\n      fillGridAt(px, py, drawMask, dimension, item);\r\n    }\r\n\r\n    if (drawMask) {\r\n      ctx.restore();\r\n    }\r\n  };\r\n\r\n  /* putWord() processes each item on the list,\r\n       calculate it's size and determine it's position, and actually\r\n       put it on the canvas. */\r\n  var putWord = function putWord(item, loopIndex) {\r\n    if (loopIndex > 20) {\r\n      return null;\r\n    }\r\n\r\n    var word, weight, attributes;\r\n    if (Array.isArray(item)) {\r\n      word = item[0];\r\n      weight = item[1];\r\n    } else {\r\n      word = item.word;\r\n      weight = item.weight;\r\n      attributes = item.attributes;\r\n    }\r\n    var rotateDeg = getRotateDeg();\r\n\r\n    var extraDataArray = getItemExtraData(item);\r\n\r\n    // get info needed to put the text onto the canvas\r\n    var info = getTextInfo(word, weight, rotateDeg, extraDataArray);\r\n\r\n    // not getting the info means we shouldn't be drawing this one.\r\n    if (!info) {\r\n      return false;\r\n    }\r\n\r\n    if (exceedTime()) {\r\n      return false;\r\n    }\r\n\r\n    // If drawOutOfBound is set to false,\r\n    // skip the loop if we have already know the bounding box of\r\n    // word is larger than the canvas.\r\n    if (!settings.drawOutOfBound && !settings.shrinkToFit) {\r\n      var bounds = info.bounds;\r\n      if (bounds[1] - bounds[3] + 1 > ngx || bounds[2] - bounds[0] + 1 > ngy) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Determine the position to put the text by\r\n    // start looking for the nearest points\r\n    var r = maxRadius + 1;\r\n\r\n    var tryToPutWordAtPoint = function (gxy) {\r\n      var gx = Math.floor(gxy[0] - info.gw / 2);\r\n      var gy = Math.floor(gxy[1] - info.gh / 2);\r\n      var gw = info.gw;\r\n      var gh = info.gh;\r\n\r\n      // If we cannot fit the text at this position, return false\r\n      // and go to the next position.\r\n      if (!canFitText(gx, gy, gw, gh, info.occupied)) {\r\n        return false;\r\n      }\r\n\r\n      // Actually put the text on the canvas\r\n      drawText(\r\n        gx,\r\n        gy,\r\n        info,\r\n        word,\r\n        weight,\r\n        maxRadius - r,\r\n        gxy[2],\r\n        rotateDeg,\r\n        attributes,\r\n        extraDataArray\r\n      );\r\n\r\n      // Mark the spaces on the grid as filled\r\n      updateGrid(gx, gy, gw, gh, info, item);\r\n\r\n      return {\r\n        gx: gx,\r\n        gy: gy,\r\n        rot: rotateDeg,\r\n        info: info\r\n      };\r\n    };\r\n\r\n    while (r--) {\r\n      var points = getPointsAtRadius(maxRadius - r);\r\n\r\n      if (settings.shuffle) {\r\n        points = [].concat(points);\r\n        shuffleArray(points);\r\n      }\r\n\r\n      // Try to fit the words by looking at each point.\r\n      // array.some() will stop and return true\r\n      // when putWordAtPoint() returns true.\r\n      for (var i = 0; i < points.length; i++) {\r\n        var res = tryToPutWordAtPoint(points[i]);\r\n        if (res) {\r\n          return res;\r\n        }\r\n      }\r\n\r\n      // var drawn = points.some(tryToPutWordAtPoint);\r\n      // if (drawn) {\r\n      //   // leave putWord() and return true\r\n      //   return true;\r\n      // }\r\n    }\r\n\r\n    if (settings.shrinkToFit) {\r\n      if (Array.isArray(item)) {\r\n        item[1] = (item[1] * 3) / 4;\r\n      } else {\r\n        item.weight = (item.weight * 3) / 4;\r\n      }\r\n      return putWord(item, loopIndex + 1);\r\n    }\r\n\r\n    // we tried all distances but text won't fit, return null\r\n    return null;\r\n  };\r\n\r\n  /* Send DOM event to all elements. Will stop sending event and return\r\n       if the previous one is canceled (for cancelable events). */\r\n  var sendEvent = function sendEvent(type, cancelable, details) {\r\n    if (cancelable) {\r\n      return !elements.some(function (el) {\r\n        var event = new CustomEvent(type, {\r\n          detail: details || {}\r\n        });\r\n        return !el.dispatchEvent(event);\r\n      }, this);\r\n    } else {\r\n      elements.forEach(function (el) {\r\n        var event = new CustomEvent(type, {\r\n          detail: details || {}\r\n        });\r\n        el.dispatchEvent(event);\r\n      }, this);\r\n    }\r\n  };\r\n\r\n  /* Start drawing on a canvas */\r\n  var start = function start() {\r\n    // For dimensions, clearCanvas etc.,\r\n    // we only care about the first element.\r\n    var canvas = elements[0];\r\n\r\n    if (canvas.getContext) {\r\n      ngx = Math.ceil(canvas.width / g);\r\n      ngy = Math.ceil(canvas.height / g);\r\n    } else {\r\n      var rect = canvas.getBoundingClientRect();\r\n      ngx = Math.ceil(rect.width / g);\r\n      ngy = Math.ceil(rect.height / g);\r\n    }\r\n\r\n    // Sending a wordcloudstart event which cause the previous loop to stop.\r\n    // Do nothing if the event is canceled.\r\n    if (!sendEvent('wordcloudstart', true)) {\r\n      return;\r\n    }\r\n\r\n    // Determine the center of the word cloud\r\n    center = settings.origin\r\n      ? [settings.origin[0] / g, settings.origin[1] / g]\r\n      : [ngx / 2, ngy / 2];\r\n\r\n    // Maxium radius to look for space\r\n    maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\r\n\r\n    /* Clear the canvas only if the clearCanvas is set,\r\n         if not, update the grid to the current canvas state */\r\n    grid = [];\r\n\r\n    var gx, gy, i;\r\n    if (!canvas.getContext || settings.clearCanvas) {\r\n      elements.forEach(function (el) {\r\n        if (el.getContext) {\r\n          var ctx = el.getContext('2d');\r\n          ctx.fillStyle = settings.backgroundColor;\r\n          ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\r\n          ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\r\n        } else {\r\n          el.textContent = '';\r\n          el.style.backgroundColor = settings.backgroundColor;\r\n          el.style.position = 'relative';\r\n        }\r\n      });\r\n\r\n      /* fill the grid with empty state */\r\n      gx = ngx;\r\n      while (gx--) {\r\n        grid[gx] = [];\r\n        gy = ngy;\r\n        while (gy--) {\r\n          grid[gx][gy] = true;\r\n        }\r\n      }\r\n    } else {\r\n      /* Determine bgPixel by creating\r\n           another canvas and fill the specified background color. */\r\n      var bctx = document.createElement('canvas').getContext('2d');\r\n\r\n      bctx.fillStyle = settings.backgroundColor;\r\n      bctx.fillRect(0, 0, 1, 1);\r\n      var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\r\n\r\n      /* Read back the pixels of the canvas we got to tell which part of the\r\n           canvas is empty.\r\n           (no clearCanvas only works with a canvas, not divs) */\r\n      var imageData = canvas\r\n        .getContext('2d')\r\n        .getImageData(0, 0, ngx * g, ngy * g).data;\r\n\r\n      gx = ngx;\r\n      var x, y;\r\n      while (gx--) {\r\n        grid[gx] = [];\r\n        gy = ngy;\r\n        while (gy--) {\r\n          y = g;\r\n          /* eslint no-labels: ['error', { 'allowLoop': true }] */\r\n          singleGridLoop: while (y--) {\r\n            x = g;\r\n            while (x--) {\r\n              i = 4;\r\n              while (i--) {\r\n                if (\r\n                  imageData[((gy * g + y) * ngx * g + (gx * g + x)) * 4 + i] !==\r\n                  bgPixel[i]\r\n                ) {\r\n                  grid[gx][gy] = false;\r\n                  break singleGridLoop;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (grid[gx][gy] !== false) {\r\n            grid[gx][gy] = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      imageData = bctx = bgPixel = undefined;\r\n    }\r\n\r\n    // fill the infoGrid with empty state if we need it\r\n    if (settings.hover || settings.click) {\r\n      interactive = true;\r\n\r\n      /* fill the grid with empty state */\r\n      gx = ngx + 1;\r\n      while (gx--) {\r\n        infoGrid[gx] = [];\r\n      }\r\n\r\n      if (settings.hover) {\r\n        canvas.addEventListener('mousemove', wordcloudhover);\r\n      }\r\n\r\n      if (settings.click) {\r\n        canvas.addEventListener('click', wordcloudclick);\r\n        canvas.addEventListener('touchstart', wordcloudclick);\r\n        canvas.addEventListener('touchend', function (e) {\r\n          e.preventDefault();\r\n        });\r\n        canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\r\n      }\r\n\r\n      canvas.addEventListener('wordcloudstart', function stopInteraction() {\r\n        canvas.removeEventListener('wordcloudstart', stopInteraction);\r\n\r\n        canvas.removeEventListener('mousemove', wordcloudhover);\r\n        canvas.removeEventListener('click', wordcloudclick);\r\n        hovered = undefined;\r\n      });\r\n    }\r\n\r\n    i = 0;\r\n    var loopingFunction, stoppingFunction;\r\n    var layouting = true;\r\n    if (!settings.layoutAnimation) {\r\n      loopingFunction = function (cb) {\r\n        cb();\r\n      };\r\n      stoppingFunction = function () {\r\n        layouting = false;\r\n      };\r\n    } else if (settings.wait !== 0) {\r\n      loopingFunction = window.setTimeout;\r\n      stoppingFunction = window.clearTimeout;\r\n    } else {\r\n      loopingFunction = window.setImmediate;\r\n      stoppingFunction = window.clearImmediate;\r\n    }\r\n\r\n    var addEventListener = function addEventListener(type, listener) {\r\n      elements.forEach(function (el) {\r\n        el.addEventListener(type, listener);\r\n      }, this);\r\n    };\r\n\r\n    var removeEventListener = function removeEventListener(type, listener) {\r\n      elements.forEach(function (el) {\r\n        el.removeEventListener(type, listener);\r\n      }, this);\r\n    };\r\n\r\n    var anotherWordCloudStart = function anotherWordCloudStart() {\r\n      removeEventListener('wordcloudstart', anotherWordCloudStart);\r\n      stoppingFunction(timer[timerId]);\r\n    };\r\n\r\n    addEventListener('wordcloudstart', anotherWordCloudStart);\r\n\r\n    // At least wait the following code before call the first iteration.\r\n    timer[timerId] = (settings.layoutAnimation ? loopingFunction : setTimeout)(\r\n      function loop() {\r\n        if (!layouting) {\r\n          return;\r\n        }\r\n        if (i >= settings.list.length) {\r\n          stoppingFunction(timer[timerId]);\r\n          sendEvent('wordcloudstop', false);\r\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\r\n          delete timer[timerId];\r\n          return;\r\n        }\r\n        escapeTime = new Date().getTime();\r\n        var drawn = putWord(settings.list[i], 0);\r\n        var canceled = !sendEvent('wordclouddrawn', true, {\r\n          item: settings.list[i],\r\n          drawn: drawn\r\n        });\r\n        if (exceedTime() || canceled) {\r\n          stoppingFunction(timer[timerId]);\r\n          settings.abort();\r\n          sendEvent('wordcloudabort', false);\r\n          sendEvent('wordcloudstop', false);\r\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\r\n          return;\r\n        }\r\n        i++;\r\n        timer[timerId] = loopingFunction(loop, settings.wait);\r\n      },\r\n      settings.wait\r\n    );\r\n  };\r\n\r\n  // All set, start the drawing\r\n  start();\r\n};\r\n\r\nWordCloud.isSupported = isSupported;\r\nWordCloud.minFontSize = minFontSize;\r\n\r\nexport default WordCloud;\r\n", "import * as echarts from 'echarts/lib/echarts';\r\n\r\nimport './WordCloudSeries';\r\nimport './WordCloudView';\r\n\r\nimport wordCloudLayoutHelper from './layout';\r\n\r\nif (!wordCloudLayoutHelper.isSupported) {\r\n  throw new Error('Sorry your browser not support wordCloud');\r\n}\r\n\r\n// https://github.com/timdream/wordcloud2.js/blob/c236bee60436e048949f9becc4f0f67bd832dc5c/index.js#L233\r\nfunction updateCanvasMask(maskCanvas) {\r\n  var ctx = maskCanvas.getContext('2d');\r\n  var imageData = ctx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);\r\n  var newImageData = ctx.createImageData(imageData);\r\n\r\n  var toneSum = 0;\r\n  var toneCnt = 0;\r\n  for (var i = 0; i < imageData.data.length; i += 4) {\r\n    var alpha = imageData.data[i + 3];\r\n    if (alpha > 128) {\r\n      var tone =\r\n        imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\r\n      toneSum += tone;\r\n      ++toneCnt;\r\n    }\r\n  }\r\n  var threshold = toneSum / toneCnt;\r\n\r\n  for (var i = 0; i < imageData.data.length; i += 4) {\r\n    var tone =\r\n      imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\r\n    var alpha = imageData.data[i + 3];\r\n\r\n    if (alpha < 128 || tone > threshold) {\r\n      // Area not to draw\r\n      newImageData.data[i] = 0;\r\n      newImageData.data[i + 1] = 0;\r\n      newImageData.data[i + 2] = 0;\r\n      newImageData.data[i + 3] = 0;\r\n    } else {\r\n      // Area to draw\r\n      // The color must be same with backgroundColor\r\n      newImageData.data[i] = 255;\r\n      newImageData.data[i + 1] = 255;\r\n      newImageData.data[i + 2] = 255;\r\n      newImageData.data[i + 3] = 255;\r\n    }\r\n  }\r\n\r\n  ctx.putImageData(newImageData, 0, 0);\r\n}\r\n\r\necharts.registerLayout(function (ecModel, api) {\r\n  ecModel.eachSeriesByType('wordCloud', function (seriesModel) {\r\n    var gridRect = echarts.helper.getLayoutRect(\r\n      seriesModel.getBoxLayoutParams(),\r\n      {\r\n        width: api.getWidth(),\r\n        height: api.getHeight()\r\n      }\r\n    );\r\n\r\n    var keepAspect = seriesModel.get('keepAspect');\r\n    var maskImage = seriesModel.get('maskImage');\r\n    var ratio = maskImage ? maskImage.width / maskImage.height : 1;\r\n    keepAspect && adjustRectAspect(gridRect, ratio);\r\n\r\n    var data = seriesModel.getData();\r\n\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = gridRect.width;\r\n    canvas.height = gridRect.height;\r\n\r\n    var ctx = canvas.getContext('2d');\r\n    if (maskImage) {\r\n      try {\r\n        ctx.drawImage(maskImage, 0, 0, canvas.width, canvas.height);\r\n        updateCanvasMask(canvas);\r\n      } catch (e) {\r\n        console.error('Invalid mask image');\r\n        console.error(e.toString());\r\n      }\r\n    }\r\n\r\n    var sizeRange = seriesModel.get('sizeRange');\r\n    var rotationRange = seriesModel.get('rotationRange');\r\n    var valueExtent = data.getDataExtent('value');\r\n\r\n    var DEGREE_TO_RAD = Math.PI / 180;\r\n    var gridSize = seriesModel.get('gridSize');\r\n    wordCloudLayoutHelper(canvas, {\r\n      list: data\r\n        .mapArray('value', function (value, idx) {\r\n          var itemModel = data.getItemModel(idx);\r\n          return [\r\n            data.getName(idx),\r\n            itemModel.get('textStyle.fontSize', true) ||\r\n              echarts.number.linearMap(value, valueExtent, sizeRange),\r\n            idx\r\n          ];\r\n        })\r\n        .sort(function (a, b) {\r\n          // Sort from large to small in case there is no more room for more words\r\n          return b[1] - a[1];\r\n        }),\r\n      fontFamily:\r\n        seriesModel.get('textStyle.fontFamily') ||\r\n        seriesModel.get('emphasis.textStyle.fontFamily') ||\r\n        ecModel.get('textStyle.fontFamily'),\r\n      fontWeight:\r\n        seriesModel.get('textStyle.fontWeight') ||\r\n        seriesModel.get('emphasis.textStyle.fontWeight') ||\r\n        ecModel.get('textStyle.fontWeight'),\r\n\r\n      gridSize: gridSize,\r\n\r\n      ellipticity: gridRect.height / gridRect.width,\r\n\r\n      minRotation: rotationRange[0] * DEGREE_TO_RAD,\r\n      maxRotation: rotationRange[1] * DEGREE_TO_RAD,\r\n\r\n      clearCanvas: !maskImage,\r\n\r\n      rotateRatio: 1,\r\n\r\n      rotationStep: seriesModel.get('rotationStep') * DEGREE_TO_RAD,\r\n\r\n      drawOutOfBound: seriesModel.get('drawOutOfBound'),\r\n      shrinkToFit: seriesModel.get('shrinkToFit'),\r\n\r\n      layoutAnimation: seriesModel.get('layoutAnimation'),\r\n\r\n      shuffle: false,\r\n\r\n      shape: seriesModel.get('shape')\r\n    });\r\n\r\n    function onWordCloudDrawn(e) {\r\n      var item = e.detail.item;\r\n      if (e.detail.drawn && seriesModel.layoutInstance.ondraw) {\r\n        e.detail.drawn.gx += gridRect.x / gridSize;\r\n        e.detail.drawn.gy += gridRect.y / gridSize;\r\n        seriesModel.layoutInstance.ondraw(\r\n          item[0],\r\n          item[1],\r\n          item[2],\r\n          e.detail.drawn\r\n        );\r\n      }\r\n    }\r\n\r\n    canvas.addEventListener('wordclouddrawn', onWordCloudDrawn);\r\n\r\n    if (seriesModel.layoutInstance) {\r\n      // Dispose previous\r\n      seriesModel.layoutInstance.dispose();\r\n    }\r\n\r\n    seriesModel.layoutInstance = {\r\n      ondraw: null,\r\n\r\n      dispose: function () {\r\n        canvas.removeEventListener('wordclouddrawn', onWordCloudDrawn);\r\n        // Abort\r\n        canvas.addEventListener('wordclouddrawn', function (e) {\r\n          // Prevent default to cancle the event and stop the loop\r\n          e.preventDefault();\r\n        });\r\n      }\r\n    };\r\n  });\r\n});\r\n\r\necharts.registerPreprocessor(function (option) {\r\n  var series = (option || {}).series;\r\n  !echarts.util.isArray(series) && (series = series ? [series] : []);\r\n\r\n  var compats = ['shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\r\n\r\n  echarts.util.each(series, function (seriesItem) {\r\n    if (seriesItem && seriesItem.type === 'wordCloud') {\r\n      var textStyle = seriesItem.textStyle || {};\r\n\r\n      compatTextStyle(textStyle.normal);\r\n      compatTextStyle(textStyle.emphasis);\r\n    }\r\n  });\r\n\r\n  function compatTextStyle(textStyle) {\r\n    textStyle &&\r\n      echarts.util.each(compats, function (key) {\r\n        if (textStyle.hasOwnProperty(key)) {\r\n          textStyle['text' + echarts.format.capitalFirst(key)] = textStyle[key];\r\n        }\r\n      });\r\n  }\r\n});\r\n\r\nfunction adjustRectAspect(gridRect, aspect) {\r\n  // var outerWidth = gridRect.width + gridRect.x * 2;\r\n  // var outerHeight = gridRect.height + gridRect.y * 2;\r\n  var width = gridRect.width;\r\n  var height = gridRect.height;\r\n  if (width > height * aspect) {\r\n    gridRect.x += (width - height * aspect) / 2;\r\n    gridRect.width = height * aspect;\r\n  } else {\r\n    gridRect.y += (height - width / aspect) / 2;\r\n    gridRect.height = width / aspect;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["install", "setZeroTimeout", "timer", "isSupported", "shuffleArray", "WordCloud", "getInfoGridFromMouseTouchEvent", "wordcloudhover", "wordcloudclick", "getPointsAtRadius", "exceedTime", "getRotateDeg", "getTextInfo", "mu", "canFitText", "drawText", "fillGridAt", "updateGrid", "putWord", "sendEvent", "start", "addEventListener", "removeEventListener", "anotherWordCloudStart"]
}
